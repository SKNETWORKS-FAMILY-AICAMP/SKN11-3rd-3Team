# -*- coding: utf-8 -*-
"""memory_recommend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yYiCtsvL4-x1Cotwebg61IDq8vBgn1Ij
"""

# !pip install langchain
# !pip install openai faiss-cpu sentence-transformers langchain-core
# !pip install -U langchain langchain-openai

import os
import json
import re
import faiss
import numpy as np
from sentence_transformers import SentenceTransformer

from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.chat_history import BaseChatMessageHistory
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_openai import ChatOpenAI




# ✅ 1. 세션 기반 메모리 클래스 정의
class InMemoryHistory(BaseChatMessageHistory):
    def __init__(self):
        self.messages = []

    def add_messages(self, messages):
        self.messages.extend(messages)

    def clear(self):
        self.messages = []

    def __repr__(self):
        return str(self.messages)


store = {}
def get_by_session_id(session_id):
    if session_id not in store:
        store[session_id] = InMemoryHistory()
    return store[session_id]


# ✅ 2. FAISS + 게임 데이터 로드
index = faiss.read_index("game_index.faiss")

with open("texts.json", "r", encoding="utf-8") as f:
    texts = json.load(f)

with open("game_names.json", "r", encoding="utf-8") as f:
    game_names = json.load(f)

embed_model = SentenceTransformer("BAAI/bge-m3", device="cpu")


# ✅ 3. LangChain Prompt + LLM + Chain 정의
prompt = ChatPromptTemplate.from_messages([
    (
        "system",
        "너는 보드게임 추천 도우미야. 다음은 추천 가능한 게임 설명들이야:\n\n{context}\n\n"
        "반드시 이 게임 목록 안에서만 추천해. 새로운 게임을 지어내지 마.\n"
        "질문에 맞는 게임 3개를 골라 아래 형식으로 답해:\n"
        "게임명1: 이유\n게임명2: 이유\n게임명3: 이유\n마지막 줄은 '추천 완료!'로 끝내."
    ),
    MessagesPlaceholder(variable_name="history"),
    ("human", "{query}")
])

llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0.7,  openai_api_key="")

chain = prompt | llm
chain_with_memory = RunnableWithMessageHistory(
    chain,
    get_session_history=get_by_session_id,
    input_messages_key="query",
    history_messages_key="history"
)


# ✅ 4. 유사 게임 설명 검색 함수
def search_similar_context(query, top_k=3):
    query_vec = embed_model.encode([query], normalize_embeddings=True)
    D, I = index.search(np.array(query_vec), top_k)

    context_blocks = []
    for i in I[0]:
        context_blocks.append(f"[{game_names[i]}]\n{texts[i]}")
    return "\n\n".join(context_blocks)


# ✅ 5. 실행 루프
session_id = "user1"

while True:
    user_query = input("🎮 원하는 게임 스타일을 입력하세요 ('q' 종료): ")
    if user_query.lower() == "q":
        print("👋 종료합니다.")
        break

    context = search_similar_context(user_query)
    response = chain_with_memory.invoke(
        {"query": user_query, "context": context},
        config={"configurable": {"session_id": session_id}}
    )

    print("\n🤖 추천 결과:\n")
    print(response.content)